Description: >
    This template deploys an ECS cluster to the provided VPC and subnets 
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType1: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: c3.large

    InstanceType2: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: c4.large

    InstanceType3: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: m4.large

    MaximumPrice:
        Description: Maximum bid value for Spot Instances
        Type: Number
        Default: 0.10

    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS cluster
        Type: AWS::EC2::KeyPair::KeyName

    MinClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 2

    MaxClusterSize:
        Description: How many ECS hosts do you want this cluster to have at most?
        Type: Number
        Default: 2

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    DeviceName:
        Description: The name of the device within the EC2 instance, such as /dev/dsh or xvdh.
        Type: String
        Default: "/dev/xvda"

    VolumeSize:
        Description: Disk volume size (GiB's) of the EC2 instances
        Type: Number
        Default: 10

Mappings:

    # These are the latest ECS optimized AMIs as of March 2017:
    #
    #   amzn-ami-2017.03.d-amazon-ecs-optimized
    #   ECS agent:    1.14.3
    #   Docker:       17.03.1-ce
    #   ecs-init:     1.14.3-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific) 

    AWSRegionToAMI:
        us-east-1:
            AMI: ami-d61027ad
        us-east-2:
            AMI: ami-bb8eaede
        us-west-1:
            AMI: ami-514e6431
        us-west-2:
            AMI: ami-c6f81abe
        eu-west-1:
            AMI: ami-bd7e8dc4
        eu-west-2:
            AMI: ami-0a85946e
        eu-central-1:
            AMI: ami-f15ff69e
        ap-northeast-1:
            AMI: ami-ab5ea9cd
        ap-southeast-1:
            AMI: ami-ae0b91cd
        ap-southeast-2:
            AMI: ami-c3233ba0
        ca-central-1:
            AMI: ami-32bb0556

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    SpotFleet:
      Type: AWS::EC2::SpotFleet
      DependsOn:
        - ECSCluster
        - ECSRole
        - SpotFleetRole
      Properties:
        SpotFleetRequestConfigData:
          AllocationStrategy: lowestPrice
          IamFleetRole: !GetAtt SpotFleetRole.Arn
          SpotPrice:
            Ref: MaximumPrice
          TargetCapacity:
            Ref: MinClusterSize
          TerminateInstancesWithExpiration: true          
          LaunchSpecifications:
          - IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId:
              Fn::FindInMap: [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
            InstanceType: !Ref InstanceType1
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
            - GroupId: !Ref SecurityGroup
            SubnetId: !Select [0, !Ref Subnets]
            UserData:
              "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y aws-cli aws-cfn-bootstrap jq
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource SpotFleet
                    INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                    TAGS=$(aws cloudformation describe-stacks --region ${AWS::Region} --stack-name ${EnvironmentName} | jq -r '.Stacks[0].Tags | map(select(.Key != "Name")) | .[.|length] |= .+ {"Key": "Name", "Value": "${EnvironmentName}"}')
                    aws ec2 create-tags --region us-west-2 --resources $INSTANCE_ID --tags "$TAGS"
            BlockDeviceMappings:
                - DeviceName: !Ref DeviceName
                  Ebs: 
                      VolumeSize: !Ref VolumeSize
          - IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId:
              Fn::FindInMap: [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
            InstanceType: !Ref InstanceType1
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
            - GroupId: !Ref SecurityGroup
            SubnetId: !Select [1, !Ref Subnets]
            UserData:
              "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y aws-cli aws-cfn-bootstrap jq
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource SpotFleet
                    INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                    TAGS=$(aws cloudformation describe-stacks --region ${AWS::Region} --stack-name ${EnvironmentName} | jq -r '.Stacks[0].Tags | map(select(.Key != "Name")) | .[.|length] |= .+ {"Key": "Name", "Value": "${EnvironmentName}"}')
                    aws ec2 create-tags --region us-west-2 --resources $INSTANCE_ID --tags "$TAGS"
            BlockDeviceMappings:
                - DeviceName: !Ref DeviceName
                  Ebs: 
                      VolumeSize: !Ref VolumeSize
          - IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId:
              Fn::FindInMap: [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
            InstanceType: !Ref InstanceType2
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
            - GroupId: !Ref SecurityGroup
            SubnetId: !Select [0, !Ref Subnets]
            UserData:
              "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y aws-cli aws-cfn-bootstrap jq
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource SpotFleet
                    INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                    TAGS=$(aws cloudformation describe-stacks --region ${AWS::Region} --stack-name ${EnvironmentName} | jq -r '.Stacks[0].Tags | map(select(.Key != "Name")) | .[.|length] |= .+ {"Key": "Name", "Value": "${EnvironmentName}"}')
                    aws ec2 create-tags --region us-west-2 --resources $INSTANCE_ID --tags "$TAGS"
            BlockDeviceMappings:
                - DeviceName: !Ref DeviceName
                  Ebs: 
                      VolumeSize: !Ref VolumeSize
          - IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId:
              Fn::FindInMap: [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
            InstanceType: !Ref InstanceType2
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
            - GroupId: !Ref SecurityGroup
            SubnetId: !Select [1, !Ref Subnets]
            UserData:
              "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y aws-cli aws-cfn-bootstrap jq
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource SpotFleet
                    INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                    TAGS=$(aws cloudformation describe-stacks --region ${AWS::Region} --stack-name ${EnvironmentName} | jq -r '.Stacks[0].Tags | map(select(.Key != "Name")) | .[.|length] |= .+ {"Key": "Name", "Value": "${EnvironmentName}"}')
                    aws ec2 create-tags --region us-west-2 --resources $INSTANCE_ID --tags "$TAGS"
            BlockDeviceMappings:
                - DeviceName: !Ref DeviceName
                  Ebs: 
                      VolumeSize: !Ref VolumeSize
          - IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId:
              Fn::FindInMap: [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
            InstanceType: !Ref InstanceType3
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
            - GroupId: !Ref SecurityGroup
            SubnetId: !Select [0, !Ref Subnets]
            UserData:
              "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y aws-cli aws-cfn-bootstrap jq
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource SpotFleet
                    INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                    TAGS=$(aws cloudformation describe-stacks --region ${AWS::Region} --stack-name ${EnvironmentName} | jq -r '.Stacks[0].Tags | map(select(.Key != "Name")) | .[.|length] |= .+ {"Key": "Name", "Value": "${EnvironmentName}"}')
                    aws ec2 create-tags --region us-west-2 --resources $INSTANCE_ID --tags "$TAGS"
            BlockDeviceMappings:
                - DeviceName: !Ref DeviceName
                  Ebs: 
                      VolumeSize: !Ref VolumeSize
          - IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId:
              Fn::FindInMap: [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
            InstanceType: !Ref InstanceType3
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
            - GroupId: !Ref SecurityGroup
            SubnetId: !Select [1, !Ref Subnets]
            UserData:
              "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y aws-cli aws-cfn-bootstrap jq
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource SpotFleet
                    INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                    TAGS=$(aws cloudformation describe-stacks --region ${AWS::Region} --stack-name ${EnvironmentName} | jq -r '.Stacks[0].Tags | map(select(.Key != "Name")) | .[.|length] |= .+ {"Key": "Name", "Value": "${EnvironmentName}"}')
                    aws ec2 create-tags --region us-west-2 --resources $INSTANCE_ID --tags "$TAGS"
            BlockDeviceMappings:
                - DeviceName: !Ref DeviceName
                  Ebs: 
                      VolumeSize: !Ref VolumeSize
      Metadata:
        AWS::CloudFormation::Init:
            config:
                commands:
                    01_add_instance_to_cluster:
                        command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                files:
                    "/etc/cfn/cfn-hup.conf":
                        mode: 000400
                        owner: root
                        group: root
                        content: !Sub |
                            [main]
                            stack=${AWS::StackId}
                            region=${AWS::Region}
                    
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                        content: !Sub |
                            [cfn-auto-reloader-hook]
                            triggers=post.update
                            path=Resources.SpotFleet.Metadata.AWS::CloudFormation::Init
                            action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource SpotFleet

                services: 
                    sysvinit:
                        cfn-hup: 
                            enabled: true
                            ensureRunning: true
                            files: 
                                - /etc/cfn/cfn-hup.conf
                                - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    ScalableTarget:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        DependsOn:
            - SpotFleet
        Properties:
            MinCapacity: !Ref MinClusterSize
            MaxCapacity: !Ref MaxClusterSize
            ResourceId: !Sub 'spot-fleet-request/${SpotFleet}'
            # RoleARN: !GetAtt SpotFleetRole.Arn
            RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsAutoscaleRole"
            ScalableDimension: ec2:spot-fleet-request:TargetCapacity
            ServiceNamespace: ec2

    ScaleDownPolicy:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties: 
            PolicyName: !Sub '${EnvironmentName}-ScaleDownPolicy'
            PolicyType: StepScaling
            ScalingTargetId: !Ref ScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 120
                MetricAggregationType: Average
                StepAdjustments:
                    - MetricIntervalLowerBound: -10
                      MetricIntervalUpperBound: 0
                      ScalingAdjustment: -10
                    - MetricIntervalLowerBound: -20
                      MetricIntervalUpperBound: -10
                      ScalingAdjustment: -20
                    - MetricIntervalLowerBound: -30
                      MetricIntervalUpperBound: -20
                      ScalingAdjustment: -30
                    - MetricIntervalLowerBound: -40
                      MetricIntervalUpperBound: -30
                      ScalingAdjustment: -40
                    - MetricIntervalLowerBound: ''
                      MetricIntervalUpperBound: -40
                      ScalingAdjustment: -50

    ScaleUpPolicy:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties: 
            PolicyName: !Sub '${EnvironmentName}-ScaleUpPolicy'
            PolicyType: StepScaling
            ScalingTargetId: !Ref ScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 60
                MetricAggregationType: Average
                StepAdjustments:
                    - MetricIntervalLowerBound: 0
                      ScalingAdjustment: 1

    CPUReservedTooLowAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName:  !Sub 'ECS ${EnvironmentName} Reserved CPU too low'
            AlarmDescription: !Sub 'Alarm if ECS cluster ${EnvironmentName} have too little CPU reserved'
            Namespace: AWS/ECS
            MetricName: CPUReservation
            Dimensions:
                - Name: ClusterName
                  Value: !Ref ECSCluster
            Statistic: Average
            Period: 60
            EvaluationPeriods: 20
            Threshold: 70
            ComparisonOperator: LessThanThreshold
            AlarmActions:
                - !Ref ScaleDownPolicy

    CPUReservedTooHighAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName:  !Sub 'ECS ${EnvironmentName} Reserved CPU too high'
            AlarmDescription: !Sub 'Alarm if ECS cluster ${EnvironmentName} have too much CPU reserved'
            Namespace: AWS/ECS
            MetricName: CPUReservation
            Dimensions:
                - Name: ClusterName
                  Value: !Ref ECSCluster
            Statistic: Average
            Period: 60
            EvaluationPeriods: 5
            Threshold: 90
            ComparisonOperator: GreaterThanOrEqualToThreshold
            AlarmActions:
                - !Ref ScaleUpPolicy


    SpotFleetRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${EnvironmentName}-SFRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "spotfleet.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ec2:DescribeImages",
                                "ec2:DescribeSubnets",
                                "ec2:RequestSpotInstances",
                                "ec2:TerminateInstances",
                                "ec2:DescribeInstanceStatus",
                                "ec2:ModifySpotFleetRequest",
                                "ec2:DescribeSpotFleetRequests",
                                "iam:PassRole"
                            ],
                            "Resource": "*"
                        }]
                    }

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.
    ECSRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRoleSpot-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "cloudformation:DescribeStacks",
                                "ec2:CreateTags",
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTask",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref ECSRole

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster

