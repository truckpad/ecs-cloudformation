Description: >

    This template deploys a highly available ECS cluster using an AutoScaling Group, with 
    ECS hosts distributed across multiple Availability Zones. 

    Last Modified: 07th August 2017
    Authors:
        - Marcelo Manzan <marcelo.manzan@truckpad.com.br>
        - Marcos Sobrinho <marcos.sobrinho@truckpad.com.br>
        - Paul Maddox <pmaddox@amazon.com>


Parameters:

    MinClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 2

    MaxClusterSize:
        Description: How many ECS hosts do you want this cluster to have at most?
        Type: Number
        Default: 4

    SpotInstanceType1:
        Description: Instance type to use when Instance Lifecycle is "spot"
        Type: String
        AllowedValues: [c3.large, c3.xlarge, c3.2xlarge, c4.large, c4.xlarge, c4.2xlarge, m4.large, m4.xlarge, m4.2xlarge]
        Default: 'c3.large'

    SpotInstanceType2:
        Description: Instance type to use when Instance Lifecycle is "spot"
        Type: String
        AllowedValues: [c3.large, c3.xlarge, c3.2xlarge, c4.large, c4.xlarge, c4.2xlarge, m4.large, m4.xlarge, m4.2xlarge]
        Default: 'c4.large'

    SpotInstanceType3:
        Description: Instance type to use when Instance Lifecycle is "spot"
        Type: String
        AllowedValues: [c3.large, c3.xlarge, c3.2xlarge, c4.large, c4.xlarge, c4.2xlarge, m4.large, m4.xlarge, m4.2xlarge]
        Default: 'm4.large'

    SpotMaximumPrice:
        Description: Maximum bid value for Spot Instances
        Type: Number
        Default: 0.10

    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS cluster
        Type: AWS::EC2::KeyPair::KeyName

    VPCToAttach:
        Description: 'Choose an existing exported VPC name to use *OR*'
        Type: String

    SubnetPrefix:
        Description: > 
            To create a new VPC. IP address first two blocks, used to build the new VPC Subnet IPs. 
            Should be within the Private IPv4 address space and shouldn't be already in use by another
            VPC or Subnet
        Type: String
        Default: '10.16'
        AllowedPattern: ^(10|172|192)\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$

    DatadogApiKey:
        Description: Install Datadog dd-agent using this API Key. Let empty to disable
        Type: String            
        AllowedPattern: ^|[a-f0-9]{32}$

    DatadogEnableAPM:
        Description: Enable Application Performance Monitoring (trace). Only used if you have an valid Datadog API Key.
        Type: String
        Default: false
        AllowedValues: [false, true]

    DeviceName:
        Description: The name of the device within the EC2 instance, such as /dev/dsh or xvdh.
        Type: String
        Default: "/dev/xvda"

    VolumeSize:
        Description: Disk volume size (GiB's) of the EC2 instances
        Type: Number
        Default: 10


Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label: 
                default: ECS Cluster
              Parameters:
                - MinClusterSize
                - MaxClusterSize
            - Label: 
                default: ECS Cluster - Spot
              Parameters:
                - SpotInstanceType1
                - SpotInstanceType2
                - SpotInstanceType3
                - SpotMaximumPrice
                - DeviceName
                - VolumeSize
            - Label: 
                default: Networking
              Parameters:
                - KeyName
                - VPCToAttach
                - SubnetPrefix
            - Label: 
                default: Application Monitoring
              Parameters:
                - DatadogApiKey
                - DatadogEnableAPM
        ParameterLabels:
            MinClusterSize: 
                default: Minimal Cluster Size
            MaxClusterSize: 
                default: Maximum Cluster Size
            SpotInstanceType1:
                default: 'Spot Instance Type #1'
            SpotInstanceType2:
                default: 'Spot Instance Type #2'
            SpotInstanceType3:
                default: 'Spot Instance Type #3'
            SpotMaximumPrice:
                default: Spot Maximum Price
            ShouldCreateVPC:
                default: Create or attach to VPC?
            VPCToAttach:
                default: Existing VPC to attach
            SubnetPrefix: 
                default: Subnet Prefix for New VPC
            KeyName: 
                default: SSH Key Name
            DatadogApiKey: 
                default: Datadog API Key
            DatadogEnableAPM: 
                default: 'Datadog: Enable APM?'
            DeviceName:
                default: Device Name
            VolumeSize:
                default: EC2 Volume Size


Conditions:
    EnableDatadogAgent: !Not [ !Equals [ !Ref DatadogApiKey, '' ] ]
    ShouldCreateVPC: !Equals [ !Ref VPCToAttach, '' ]


Resources:

    vpc:
        Type: AWS::CloudFormation::Stack
        Condition: ShouldCreateVPC
        Properties:
            TemplateURL: https://s3.amazonaws.com/cfn-truckpad/ecs/infrastructure/vpc.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VpcCIDR: !Join ['.', [!Ref SubnetPrefix, '0.0/16']]
                PublicSubnet1CIDR: !Join ['.', [!Ref SubnetPrefix, '8.0/21']]
                PublicSubnet2CIDR: !Join ['.', [!Ref SubnetPrefix, '16.0/21']]
                PrivateSubnet1CIDR: !Join ['.', [!Ref SubnetPrefix, '24.0/21']]
                PrivateSubnet2CIDR: !Join ['.', [!Ref SubnetPrefix, '32.0/21']]

    sgs:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/cfn-truckpad/ecs/infrastructure/security-groups.yaml
            Parameters: 
                EnvironmentName: !Ref AWS::StackName
                VPC: !If [ShouldCreateVPC, !GetAtt vpc.Outputs.VPC, {'Fn::ImportValue': !Sub '${VPCToAttach}'}]

    alb:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/cfn-truckpad/ecs/infrastructure/load-balancers.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !If [ShouldCreateVPC, !GetAtt vpc.Outputs.VPC, {'Fn::ImportValue': !Sub '${VPCToAttach}'}]
                Subnets: !If [ShouldCreateVPC, !GetAtt vpc.Outputs.PublicSubnets, {'Fn::ImportValue': !Sub '${VPCToAttach}-public-subnets'}]
                SecurityGroup: !GetAtt sgs.Outputs.LoadBalancerSecurityGroup

    ecs:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub https://s3.amazonaws.com/cfn-truckpad/ecs/infrastructure/ecs-cluster-spot.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                KeyName: !Ref KeyName
                InstanceType1: !Ref SpotInstanceType1
                InstanceType2: !Ref SpotInstanceType2
                InstanceType3: !Ref SpotInstanceType3
                MaximumPrice: !Ref SpotMaximumPrice
                MinClusterSize: !Ref MinClusterSize
                MaxClusterSize: !Ref MaxClusterSize
                VPC: !If [ShouldCreateVPC, !GetAtt vpc.Outputs.VPC, {'Fn::ImportValue': !Sub '${VPCToAttach}'}]
                SecurityGroup: !GetAtt sgs.Outputs.ECSHostSecurityGroup
                Subnets: !If [ShouldCreateVPC, !GetAtt vpc.Outputs.PrivateSubnets, {'Fn::ImportValue': !Sub '${VPCToAttach}-private-subnets'}]
                DeviceName: !Ref DeviceName
                VolumeSize: !Ref VolumeSize

    ddagent:
        Type: AWS::CloudFormation::Stack
        Condition: EnableDatadogAgent
        DependsOn: ecs
        Properties:
            TemplateURL: https://s3.amazonaws.com/cfn-truckpad/ecs/services/dd-agent/service.yaml
            Parameters:
                Cluster: !Ref AWS::StackName
                ApiKey: !Ref DatadogApiKey
                EnableAPM: !Ref DatadogEnableAPM


Outputs:

    LoadBalancer:
        Description: A reference to the Application Load Balancer
        Value: !GetAtt alb.Outputs.LoadBalancer
        Export:
            Name: !Sub ${AWS::StackName}-alb

    LoadBalancerListener:
        Description: A reference to a port 80 listener
        Value: !GetAtt alb.Outputs.Listener
        Export:
            Name: !Sub ${AWS::StackName}-alb-listener

    LoadBalancerUrl:
        Description: The URL of the ALB
        Value: !GetAtt alb.Outputs.LoadBalancerUrl
        Export:
            Name: !Sub ${AWS::StackName}-alb-url

    LoadBalancerSecurityGroup:
        Description: A reference to the security group for load balancers
        Value: !GetAtt sgs.Outputs.LoadBalancerSecurityGroup
        Export:
            Name: !Sub ${AWS::StackName}-alb-sgs

    VPC:
        Description: VPC ARN
        Value: !If [ShouldCreateVPC, !GetAtt vpc.Outputs.VPC, {'Fn::ImportValue': !Sub '${VPCToAttach}'}]
        Export:
            Name: !Sub ${AWS::StackName}-vpc

    PublicSubnets:
        Description: VPC Public Subnets
        Value: !If [ShouldCreateVPC, !GetAtt vpc.Outputs.PublicSubnets, {'Fn::ImportValue': !Sub '${VPCToAttach}-public-subnets'}]
        Export:
            Name: !Sub ${AWS::StackName}-vpc-public-subnets

